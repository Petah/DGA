/*
 * PNode.java
 *
 * Created on 29 March 2009, 20:31
 */
package dataanalyzer.gui;

import dataanalyzer.entity.Algorithm;
import dataanalyzer.entity.AlgorithmProcess;
import dataanalyzer.entity.Node;
import dataanalyzer.listeners.CompletionListener;
import dataanalyzer.manager.GUIManager;
import java.io.Serializable;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author  Petah
 */
// TODO: Make auto run checkbox work
public class PNode extends javax.swing.JPanel implements CompletionListener {

    private GUIManager gui;
    private Node node;

    /** Creates new form PNode */
    public PNode(GUIManager gui, Node node) {
        this.gui = gui;
        this.node = node;
        initComponents();
        tfAddress.setText(node.toString());
        //bRefreshActionPerformed(null);
        DefaultListModel algorithmModel = (DefaultListModel) lAlgorithm.getModel();
        for (Algorithm a : gui.system.algorithmManager.get()) {
            algorithmModel.addElement(a);
        }
    }

    public void addProcess(AlgorithmProcess process) {
        DefaultListModel processModel = (DefaultListModel) lProcess.getModel();
        processModel.addElement(process);
        node.loadProcess(process);
    }

    public void complete(Object o) {
        DefaultListModel processModel = (DefaultListModel) lProcess.getModel();
        for (int i = 0; i < processModel.getSize(); i++) {
            AlgorithmProcess p = (AlgorithmProcess) processModel.get(i);
            if (p.getId() == o) {
                processModel.remove(i);
                return;
            }
        }
    }

//    private class AlgorithmListModel extends DefaultListModel {

//        public void refresh() {
//            removeAllElements();
//            AlgorithmListModel model = (AlgorithmListModel) lPreloadedAlgorithms.getModel();
//            for (Algorithm a : gui.system.algorithmManager.get()) {
//                if (!model.contains(a)) {
//                    addElement(a);
//                }
//            }
//        }
//    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lIPAddress = new javax.swing.JLabel();
        tfAddress = new javax.swing.JTextField();
        bAdd = new javax.swing.JButton();
        bRemove = new javax.swing.JButton();
        bRun = new javax.swing.JButton();
        algorithmSplitPane = new javax.swing.JSplitPane();
        localScrollPane = new javax.swing.JScrollPane();
        lAlgorithm = new javax.swing.JList();
        preloadedScrollPane = new javax.swing.JScrollPane();
        lProcess = new javax.swing.JList();
        bRefresh = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        lIPAddress.setText("IP address:");

        tfAddress.setEditable(false);

        bAdd.setText("Add");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        bRemove.setText("Remove");
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });

        bRun.setText("Run All");
        bRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRunActionPerformed(evt);
            }
        });

        algorithmSplitPane.setDividerLocation(150);

        lAlgorithm.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithms"));
        lAlgorithm.setModel(new DefaultListModel());
        lAlgorithm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lAlgorithmMouseClicked(evt);
            }
        });
        localScrollPane.setViewportView(lAlgorithm);

        algorithmSplitPane.setLeftComponent(localScrollPane);

        lProcess.setBorder(javax.swing.BorderFactory.createTitledBorder("Loaded Processes"));
        lProcess.setModel(new DefaultListModel());
        lProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lProcessMouseClicked(evt);
            }
        });
        preloadedScrollPane.setViewportView(lProcess);

        algorithmSplitPane.setRightComponent(preloadedScrollPane);

        bRefresh.setText("Refresh");
        bRefresh.setEnabled(false);
        bRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefreshActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Automaticly Run");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lIPAddress)
                        .addComponent(bRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addComponent(bRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(algorithmSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addComponent(tfAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lIPAddress)
                    .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(bAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1))
                    .addComponent(algorithmSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void bRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefreshActionPerformed
    Algorithm a = (Algorithm) lAlgorithm.getSelectedValue();
    gui.fmain.addIFrame(a.getName(), new PAlgorithmProcess(gui, a, this), -1, -1);
}//GEN-LAST:event_bRefreshActionPerformed

private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
    Algorithm a = (Algorithm) lAlgorithm.getSelectedValue();
    gui.fmain.addIFrame(a.getName(), new PAlgorithmProcess(gui, a, this), -1, -1);
}//GEN-LAST:event_bAddActionPerformed

private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveActionPerformed
//    AlgorithmListModel model1 = (AlgorithmListModel) lLocalAlgorithms.getModel();
//    AlgorithmListModel model2 = (AlgorithmListModel) lProcess.getModel();
//    int index = lProcess.getSelectedIndex();
//
//    Algorithm a = (Algorithm) model1.getElementAt(index);
//    node.removeAlgorithm(a);
//    model1.addElement(model2.getElementAt(index));
//
//    model2.removeElementAt(index);
}//GEN-LAST:event_bRemoveActionPerformed

private void lAlgorithmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lAlgorithmMouseClicked
    if (evt.getClickCount() == 2) {
        int index = lAlgorithm.locationToIndex(evt.getPoint());
        ListModel model = lAlgorithm.getModel();
        Algorithm a = (Algorithm) model.getElementAt(index);
        lAlgorithm.ensureIndexIsVisible(index);
        gui.fmain.addIFrame(a.getName(), new PAlgorithmProcess(gui, a, this), -1, -1);
    }
}//GEN-LAST:event_lAlgorithmMouseClicked

private void bRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRunActionPerformed
    DefaultListModel model = (DefaultListModel) lProcess.getModel();
    for (int i = 0; i < model.getSize(); i++) {
        AlgorithmProcess process = (AlgorithmProcess) model.getElementAt(i);
        gui.system.server.addCompletionListener(this);
        node.runProcess(process.getId());
    }
}//GEN-LAST:event_bRunActionPerformed

private void lProcessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lProcessMouseClicked
    if (evt.getClickCount() == 2) {
        int index = lAlgorithm.locationToIndex(evt.getPoint());
        ListModel model = lProcess.getModel();
        AlgorithmProcess process = (AlgorithmProcess) model.getElementAt(index);
        lProcess.ensureIndexIsVisible(index);
        gui.system.server.addCompletionListener(this);
        node.runProcess(process.getId());
    }
}//GEN-LAST:event_lProcessMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane algorithmSplitPane;
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bRefresh;
    private javax.swing.JButton bRemove;
    private javax.swing.JButton bRun;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JList lAlgorithm;
    private javax.swing.JLabel lIPAddress;
    private javax.swing.JList lProcess;
    private javax.swing.JScrollPane localScrollPane;
    private javax.swing.JScrollPane preloadedScrollPane;
    private javax.swing.JTextField tfAddress;
    // End of variables declaration//GEN-END:variables
}
