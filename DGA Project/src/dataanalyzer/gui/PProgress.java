package dataanalyzer.gui;

import dataanalyzer.entity.Algorithm;
import dataanalyzer.entity.AlgorithmProcess;
import dataanalyzer.entity.Setting;
import dataanalyzer.listeners.CompletionListener;
import dataanalyzer.listeners.ProgressListener;

/*
 * PProgress.java
 *
 * Created on 19 March 2009, 11:43
 */
import dataanalyzer.manager.GUIManager;
import org.apache.commons.lang.time.StopWatch;
import org.apache.commons.math.stat.regression.SimpleRegression;
// FIXME: When opening the frame part way through a process the timer starts from then (making it inacurate)
/**
 *
 * @author  davnei06
 */
public class PProgress extends javax.swing.JPanel implements ProgressListener, CompletionListener {

    private GUIManager gui;
    private int prevValue;
    private AlgorithmProcess process;
    private ProcessEstimator processEstimator;

    /** Creates new form PProgress */
    public PProgress(GUIManager gui, AlgorithmProcess process) {
        this.gui = gui;
        this.process = process;
        initComponents();

        processEstimator = new ProcessEstimator(100, 1);
        processEstimator.start();

        //Checkbox settings
        Setting<Boolean> autoClose = gui.system.settingsManager.find("autoCloseProgress");
        if (autoClose != null) {
            cbAutoClose.setSelected(autoClose.value);
        }
    }

    public void update(int value, String label) {
        if (prevValue < value) {
            prevValue = value;
            processEstimator.unitCompleted();
            tfTime.setText(processEstimator.getTimeSpent() + " milliseconds");
            tfRemaining.setText(processEstimator.projectedTimeRemaining() + " milliseconds");
        }
        progressBar.setValue(value);
        progressBar.setString(label);
    }

    public void complete(Object o) {
        tfRemaining.setText("Complete");
        if (cbAutoClose.isSelected()) {
            gui.fmain.closeIFrame(this);
        }
    }
    //http://discursive.com/books/cjcook/reference/math-sect-estimating-time-left.html
    private class ProcessEstimator {

        private SimpleRegression regression = new SimpleRegression();
        private StopWatch stopWatch = new StopWatch();    // Total number of units
        private int units = 0;    // Number of units completed
        private int completed = 0;    // Sample rate for regression
        private int sampleRate = 1;

        public ProcessEstimator(int numUnits, int sampleRate) {
            this.units = numUnits;
            this.sampleRate = sampleRate;
        }

        public void start() {
            stopWatch.start();
        }

        public void stop() {
            stopWatch.stop();
        }

        public void unitCompleted() {
            completed++;

            if (completed % sampleRate == 0) {
                long now = System.currentTimeMillis();
                regression.addData(units - completed, stopWatch.getTime());
            }
        }

        public long projectedFinish() {
            return (long) regression.getIntercept();
        }

        public long getTimeSpent() {
            return stopWatch.getTime();
        }

        public long projectedTimeRemaining() {
            long timeRemaining = projectedFinish() - getTimeSpent();
            return timeRemaining;
        }

        public int getUnits() {
            return units;
        }

        public int getCompleted() {
            return completed;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        lProgress = new javax.swing.JLabel();
        lTime = new javax.swing.JLabel();
        tfTime = new javax.swing.JTextField();
        tfRemaining = new javax.swing.JTextField();
        lRemaining = new javax.swing.JLabel();
        bStop = new javax.swing.JButton();
        cbAutoClose = new javax.swing.JCheckBox();

        progressBar.setToolTipText("Algorithm progress");

        lProgress.setText("Progress:");

        lTime.setText("Time:");

        tfTime.setEditable(false);

        tfRemaining.setEditable(false);

        lRemaining.setText("Time remaining (estimate):");

        bStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process-stop.png"))); // NOI18N
        bStop.setText("Stop");
        bStop.setToolTipText("Stop algorithm");
        bStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });

        cbAutoClose.setText("Automaticly close ");
        cbAutoClose.setToolTipText("Automaticly close this window once complete");
        cbAutoClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAutoCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lProgress)
                        .addGap(18, 18, 18)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lRemaining)
                            .addComponent(lTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTime, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                            .addComponent(tfRemaining, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAutoClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTime)
                    .addComponent(tfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRemaining)
                    .addComponent(tfRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bStop)
                    .addComponent(cbAutoClose))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void bStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed
    process.stop();
}//GEN-LAST:event_bStopActionPerformed

private void cbAutoCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAutoCloseActionPerformed
    gui.system.settingsManager.add(new Setting<Boolean>("autoCloseProgress", cbAutoClose.isSelected(), "Boolean"));
}//GEN-LAST:event_cbAutoCloseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bStop;
    private javax.swing.JCheckBox cbAutoClose;
    private javax.swing.JLabel lProgress;
    private javax.swing.JLabel lRemaining;
    private javax.swing.JLabel lTime;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField tfRemaining;
    private javax.swing.JTextField tfTime;
    // End of variables declaration//GEN-END:variables
}
