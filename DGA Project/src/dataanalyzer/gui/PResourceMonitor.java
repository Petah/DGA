/*
 * PResourceManager.java
 *
 * Created on 15 March 2009, 15:36
 */
package dataanalyzer.gui;

import dataanalyzer.UserInterface;
import dataanalyzer.chart.CLine;
import dataanalyzer.chart.IChart;
import dataanalyzer.entity.DataDouble;
import dataanalyzer.entity.Memory;
import dataanalyzer.entity.Output;
import dataanalyzer.entity.SequenceData;
import dataanalyzer.entity.Setting;
import dataanalyzer.exception.InvalidDataTypeException;
import dataanalyzer.manager.GUIManager;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
// TODO: Add setting to set the scale of the memory usage chart (eg only display the latest 50 updates)
// TODO: Add setting to set polling speed of memory
// TODO: Add button to free all possible memory

/**
 *
 * @author  davnei06
 */
public class PResourceMonitor extends javax.swing.JPanel {

    private GUIManager gui;
    private Thread chartLoadThread;
    private IChart chart = new CLine("Memory Usage", "Time", "MB", false, false, false);
    private SequenceData memoryUsage = new SequenceData();
    private int memoryGraphSize;

    /** Creates new form PResourceManager */
    public PResourceMonitor(GUIManager gui) {
        this.gui = gui;
        initComponents();

        Setting<Integer> s = gui.system.settingsManager.find("memoryGraphSize");
        memoryGraphSize = s.value;

        //Create a thread to update memory information every second
        MemoryUpdateThread memoryUpdateThread = new MemoryUpdateThread();
        memoryUpdateThread.start();
    }

    class MemoryUpdateThread extends Thread {

        @Override
        public void run() {
            try {
                while (true) {
                    updateMemory();
                    sleep(1000);
                }
            } catch (Exception ex) {
            }
        }
    }

    public void updateMemory() {
        Memory m = gui.system.resourceManager.getMemory();
        tfFree.setText(m.getFree());
        tfUsed.setText(m.getUsed());
        tfMaximum.setText(m.getMaximum());
        tfAllocated.setText(m.getAllocated());
        memoryUsage.addSingle(new DataDouble((double) m.used / 1024 / 1024));
        if (memoryUsage.size() > memoryGraphSize) {
            memoryUsage.remove(0);
        }
        createChart();
    }

    private void createChart() {
        if (chartLoadThread != null && chartLoadThread.isAlive()) {
            gui.system.userInterface.handleError("Chart is still loading.", UserInterface.ALL);
        } else {
            chartLoadThread = new Thread(new ChartLoadProcess(), "Load chart");
            chartLoadThread.start();
        }
    }

    private class ChartLoadProcess implements Runnable {

        private JFreeChart jFreeChart;

        @Override
        public void run() {
            try {
                if (chart != null) {
                    chart.setOffset(0);
                    chart.setOutput(new Output(memoryUsage, this));
                    chart.setScale(memoryUsage.size());
                    chart.setStep(1);
                    jFreeChart = chart.create();
                } else {
                    gui.system.userInterface.handleError("Memory chart is null");
                }
            } catch (InvalidDataTypeException ex) {
                gui.system.userInterface.handleError("Invalid data for " + chart + " visulisation<br>(" + ex.getMessage() + ")");
            }

            if (jFreeChart != null) {
                ((ChartPanel) pMemoryGraph).setChart(jFreeChart);
            } else {
                gui.system.userInterface.handleError("Could not create chart.");
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lFree = new javax.swing.JLabel();
        lUsed = new javax.swing.JLabel();
        tfFree = new javax.swing.JTextField();
        tfUsed = new javax.swing.JTextField();
        lMaximum = new javax.swing.JLabel();
        lAllocated = new javax.swing.JLabel();
        tfMaximum = new javax.swing.JTextField();
        tfAllocated = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pMemoryGraph = new ChartPanel(null);

        lFree.setText("Free");

        lUsed.setText("Used");

        lMaximum.setText("Maximum");

        lAllocated.setText("Allocated");

        jLabel1.setText("Java Virtual Memory");

        jButton1.setText("Garbage Collect");
        jButton1.setToolTipText("Attempt to free unused memory");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lFree)
                            .addComponent(lUsed))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfUsed, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                            .addComponent(tfFree, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lMaximum)
                            .addComponent(lAllocated))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfMaximum, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                            .addComponent(tfAllocated, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
                    .addComponent(jButton1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFree)
                    .addComponent(tfFree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lUsed)
                    .addComponent(tfUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAllocated)
                    .addComponent(tfAllocated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMaximum)
                    .addComponent(tfMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Information", jPanel1);

        pMemoryGraph.setBackground(new java.awt.Color(255, 255, 204));

        javax.swing.GroupLayout pMemoryGraphLayout = new javax.swing.GroupLayout(pMemoryGraph);
        pMemoryGraph.setLayout(pMemoryGraphLayout);
        pMemoryGraphLayout.setHorizontalGroup(
            pMemoryGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );
        pMemoryGraphLayout.setVerticalGroup(
            pMemoryGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Memory Usage Graph", pMemoryGraph);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    System.gc();
}//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lAllocated;
    private javax.swing.JLabel lFree;
    private javax.swing.JLabel lMaximum;
    private javax.swing.JLabel lUsed;
    private javax.swing.JPanel pMemoryGraph;
    private javax.swing.JTextField tfAllocated;
    private javax.swing.JTextField tfFree;
    private javax.swing.JTextField tfMaximum;
    private javax.swing.JTextField tfUsed;
    // End of variables declaration//GEN-END:variables
}
